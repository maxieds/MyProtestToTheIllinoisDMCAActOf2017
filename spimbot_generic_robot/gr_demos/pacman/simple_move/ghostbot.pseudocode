###################### pseudocode for the running of the ghostbot:
#
#function: grid(row, col);
#
#int px, py, gx, gy;
#int grid_check_x, grid_check_y;
#int last_move_dir = 0; // 0=x_dir, 1=y_dir
#int x_move = 0; // 0=left, 1=right, 2=neither
#int y_move = 0; // 0=up, 1=down, 2=neither
#bool backtracking = false;
#int num_backtracking_steps = 0;
#int backtracking_dir; // 1=up, 2=down, 3=left, 4=right
#
#on_grid_align() {
#
#     // make sure will still be aligned with the grid 
#     // once figure out how to move:
#     set velocity = 0;
#     
#     // move to pacman:
#     if(!backtracking) {
#         
#          get px, py, gx, gy;
#     
#          // how to move in the x/y dirs:
#          if(px > gx) x_move = 1;
#          else if(px < gx) x_move = 0;
#          else x_move = 2;
#          if(py > gy) y_move = 1;
#          else if(py < gy) y_move = 0;
#          else y_move = 2;
#     
#          // check grid cells for potential bonks:
#          if(x_move == 1) grid_check_x = grid(gy, gx + 1);
#          else grid_check_x = grid(gy, gx - 1);
#          if(y_move == 1) grid_check_y = grid(gy + 1, gx);
#          else grid_check_y = grid(gy - 1, gx);
#
#          // move:
#          if((x_move == 2) && (y_move == 2)) continue moving;
#          else if((x_move == 2) && (grid_check_y == 1)) {
#          
#               // backtrack:
#               backtracking = true;
#
#               // find shortest backtracking path:
#               // check left direction:
#               int count_left = 0, x_pos = gx;
#               while(true) {
#
#                    if(grid(gy, x_pos - 1) == 1) {
#                         count_left = -1;
#                         break;
#                    } 
#                    else {
#                         count_left++;
#                         x_pos--;
#                    }
#
#                    if((y_move == 0) && (grid(gy - 1, x_pos) == 0))
#                         break;
#                    else if((y_move == 1) && (grid(gy + 1, x_pos) == 0))
#                         break;
#
#               }
#
#               // check right direction:
#               int count_right = 0; x_pos = gx;
#               while(true) {
#
#                    if(grid(gy, x_pos + 1) == 1) {
#                         count_right = -1;
#                         break;
#                    }
#                    else {
#                         count_right++;
#                         x_pos++;
#                    }
#
#                    if((y_move == 0) && (grid(gy - 1, x_pos) == 0))
#                         break;
#                    else if((y_move == 1) && (grid(gy + 1, x_pos) == 0))
#                         break;
#
#               }
#
#               // figure out what path to take:
#               if((count_left == -1) || (count_right <= count_left)) {
#                    num_backtracking_steps = count_right - 1;
#                    backtracking_dir = 4;
#                    move right; // make first step
#                    return;
#               }
#               else { //if((count_right == -1) || (count_right > count_left))
#                    num_backtracking_steps = count_left - 1;
#                    backtracking_dir = 3;
#                    move left; // first step
#                    return;
#               }
#
#          }
#          else if((y_move == 2) && (grid_check_x == 1)) {
#
#               backtracking = true;
#
#               // check up direction:
#               int count_up = 0, y_pos = gy;
#               while(true) {
#
#                    if(grid(y_pos - 1, gx) == 1) {
#                         count_up = -1;
#                         break;
#                    }
#                    else {
#                         count_up++;
#                         y_pos--;
#                    }
#
#                    if((x_move == 0) && (grid(y_pos, gx - 1) == 0))
#                         break;
#                    else if((x_move == 1) && (grid(y_pos, gx + 1) == 0))
#                         break;
#
#               }
#
#               // check down direction
#               int count_down = 0; y_pos = gy;
#               while(true) {
#
#                    if(grid(y_pos + 1, gx) == 1) {
#                         count_down = -1;
#                         break;
#                    }
#                    else {
#                         count_down++;
#                         y_pos++;
#                    }
#                    
#                    if((x_move == 0) && (grid(y_pos, gx - 1) == 0))
#                         break;
#                    else if((x_move == 1) && (grid(y_pos, gx + 1) == 0))
#                         break;
#
#               }
#
#               if((count_down == -1) || (count_up <= count_down)) {
#                    num_backtracking_steps = count_up - 1;
#                    backtracking_dir = 1;
#                    move up; // first step
#                    return;
#               }
#               else {
#                    num_backtracking_steps = count_down - 1;
#                    backtracking_dir = 2;
#                    move down; // first step
#                    return;
#               }
#
#          }
#          else if((grid_check_x == 1) && (grid_check_y == 1)) {
#
#               backtracking = true;
#               
#               // figure out whether xaxis or yaxis has the shorter path:
#               int count_x = 0, count_y = 0, x_pos = gx, y_pos = gy;
#               // check x_dir:
#               if(x_move == 0) {
#                    // move to the right:
#                    while(true) {
#                         
#                         if(grid(gy, x_pos + 1) == 1) {
#                              count_x = -1;
#                              break;
#                         }
#                         else {
#                              count_x++;
#                              x_pos++;
#                         }
#
#                         if((y_move == 0) && (grid(gy - 1, x_pos) == 0))
#                              break;
#                         else if((y_move == 1) && (grid(gy + 1, x_pos) == 0))
#                              break;
#
#                    }
#               
#               }
#               else {
#               
#                    // move to the left:
#                    while(true) {
#                         
#                         if(grid(gy, x_pos - 1) == 1) {
#                              count_x = -1;
#                              break;
#                         }
#                         else {
#                              count_x++;
#                              x_pos--;
#                         }
#
#                         if((y_move == 0) && (grid(gy - 1, x_pos) == 0))
#                              break;
#                         else if((y_move == 1) && (grid(gy + 1, x_pos) == 0))
#                              break;
#
#                    } 
#               
#               }
#
#               // check the y dir:
#               if(y_move == 0) {
#               
#                    // move down:
#                    while(true) {
#                         
#                         if(grid(y_pos + 1, gx) == 1) {
#                              count_x = -1;
#                              break;
#                         }
#                         else {
#                              count_y++;
#                              y_pos++;
#                         }
#
#                         if((x_move == 0) && (grid(y_pos, gx - 1) == 0))
#                              break;
#                         else if((x_move == 1) && (grid(y_pos, gx + 1) == 0))
#                              break;
#
#                    } 
#               
#               }
#               else {
#               
#                    // move up:
#                    while(true) {
#                         
#                         if(grid(y_pos - 1, gx) == 1) {
#                              count_x = -1;
#                              break;
#                         }
#                        else {
#                              count_y++;
#                              y_pos--;
#                        }
#
#                         if((x_move == 0) && (grid(y_pos, gx - 1) == 0))
#                              break;
#                         else if((x_move == 1) && (grid(y_pos, gx + 1) == 0))
#                              break;
#
#                    } 
#               
#               }
#
#               // see what direction to use:
#               if((count_x == -1) || (count_y <= count_x)) {
#                    num_backtracking_steps = count_y - 1;
#                    if(y_move == 0) {
#                         backtracking_dir = 2;
#                         move down; // first step
#                    }
#                    else {
#                         backtracking_dir = 1;
#                         move up;
#                    }
#                    return;
#               }
#               else {
#                    num_backtracking_steps = count_x - 1;
#                    if(x_move == 0) {
#                         backtracking_dir = 4;
#                         move right;
#                    }
#                    else {
#                         backtracking_dir = 3;
#                         move left;
#                    }
#                    return;
#
#          }
#          else if((x_move == 2) || (grid_check_x == 1)) {
#          
#               // move in y dir + set last_move_dir:
#               if(y_move == 0) move up;
#               else move down;
#               last_move_dir = 1;
#
#          }
#          else if((y_move == 2) || (grid_check_y == 1)) {
#          
#               // move in x dir + set last_move_dir:
#               if(x_move = 0) move left;
#               else move right;
#               last_move_dir = 0;
#
#          }
#          else {
#          
#               // alternate x and y dirs:
#               if(last_move_dir == 1) {
#
#                    last_move_dir = 0;
#                    if(x_move == 0) move left;
#                    else move right;
#
#               }
#               else {
#
#                    last_move_dir = 1;
#                    if(y_move == 0) move up;
#                    else move down;
#
#               }
#
#          }
#
#     }
#     else { // backtrack
#
#          if(num_backtracking_steps == 0) {
#
#               backtracking = false;
#               
#               if((backtracking_dir == 1) || (backtracking_dir == 2)) {
#                    
#                    if(x_move == 0) move left;
#                    else move right;
#
#               }
#               else {
#
#                    if(y_move == 0) move up;
#                    else move down;
#
#               }
#
#          }
#          else {
#               
#               if(backtracking_dir == 1) move up;
#               else if(backtracking_dir == 2) move down;
#               else if(backtracking_dir == 3) move left;
#               else move right;
#
#               num_backtracking_steps--;
#
#          }
#
#     }
#
#}
###################### end pseudocode for the running of the ghostbot

###################### pseudocode for count_steps_x:

# Modified pseudocode:
#
#count_steps_x(a0) {
#
#     int count = 0, x_pos = gx;
#     while(true) {
#
#          if(a0 == 0) { // move left
#
#               if(grid(gy, x_pos - 1) == 1) {
#                    count = -1;
#                    break;
#               }
#              else {
#                    count++;
#                    x_pos--;
#               }
#
#          
#          }
#          else { // move right
#
#               if(grid(gy, x_pos + 1) == 1) {
#                    count = -1;
#                    break;
#               }
#               else {
#                    count++;
#                    x_pos++;
#               }
#
#          }
#               
#          // check for end of path:
#          if((y_move == 0) && (grid(gy - 1, x_pos) == 0))
#               break;
#          else if((y_move == 1) && (grid(gy + 1, x_pos) == 0))
#               break;
#
#    }
#
#}
#
###################### end pseudocode for count_steps_x

###################### pseudocode for count_steps_y:

#
# Modified pseudocode:
#
#count_steps_y(a0) {
#
#     int count = 0, y_pos = gy;
#     while(true) {
#
#          if(a0 == 0) { // move up
#
#               if(grid(y_pos - 1, gx) == 1) {
#                    count = -1;
#                    break;
#               }
#              else {
#                    count++;
#                    y_pos--;
#               }
#
#          
#          }
#          else { // move down
#
#               if(grid(y_pos + 1, gx) == 1) {
#                    count = -1;
#                    break;
#               }
#               else {
#                    count++;
#                    y_pos++;
#               }
#
#          }
#               
#          // check for end of path:
#          if((x_move == 0) && (grid(y_pos, gx - 1) == 0))
#               break;
#          else if((x_move == 1) && (grid(y_pos, gx + 1) == 0))
#               break;
#
#    }
#
#}
#
###################### end pseudocode for count_steps_y
